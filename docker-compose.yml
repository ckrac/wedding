version: '3'

services:
  cms:
    container_name: cms
    build:
      context: .
      dockerfile: ./apps/cms/Dockerfile
    image: cms:latest
    restart: always
    env_file: ./apps/cms/.env
    environment:
      DATABASE_CLIENT: ${DATABASE_CLIENT}
      DATABASE_HOST: cmsDB
      DATABASE_PORT: ${DATABASE_PORT}
      DATABASE_NAME: ${DATABASE_NAME}
      DATABASE_USERNAME: ${DATABASE_USERNAME}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      ADMIN_JWT_SECRET: ${ADMIN_JWT_SECRET}
      APP_KEYS: ${APP_KEYS}
      NODE_ENV: ${NODE_ENV}
    volumes:
      - ./apps/cms/config:/opt/app/config
      - ./apps/cms/src:/opt/app/src
      - ./apps/cms/package.json:/opt/package.json
      - ./apps/cms/yarn.lock:/opt/yarn.lock
      - ./apps/cms/.env:/opt/app/.env
      - ./apps/cms/public/uploads:/opt/app/public/uploads
    ports:
      - 1337:1337
    networks:
      - cms_network
    depends_on:
      - cmsDB

  cmsDB:
    container_name: cmsDB
    platform: linux/amd64 #for platform error on Apple M1 chips
    restart: unless-stopped
    env_file: ./apps/cms/.env
    image: postgres:12.0-alpine
    environment:
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
    volumes:
      - cms_data:/var/lib/postgresql/data/ #using a volume
    ports:
      - '5432:5432'
    networks:
      - cms_network

volumes:
  cms_data:

networks:
  cms_network:
    external: true
    driver: bridge
